--- a/drivers/mtd/devices/m25p80.c
+++ b/drivers/mtd/devices/m25p80.c
@@ -70,6 +70,10 @@
 #define	SR_BP2			0x10	/* Block protect 2 */
 #define	SR_SRWD			0x80	/* SR write protect */
 
+/* Reset opcodes */
+#define OPCODE_RSTEN		0x66	/* Enable reset */
+#define OPCODE_RESET		0x99	/* Reset device */
+
 /* Define max times to check status register before we give up. */
 #define	MAX_READY_WAIT_JIFFIES	(40 * HZ)	/* M25P16 specs 40s max chip erase */
 #define	MAX_CMD_SIZE		5
@@ -205,6 +209,49 @@
 }
 
 /*
+ * Reset hole flash chip. Only be avaliable for chips size >= 32MiB
+ */
+static inline int flash_reset(struct m25p *flash)
+{
+	struct spi_transfer t[2];
+	struct spi_message m;
+	char command[2];
+	int ret;
+
+	if (flash->addr_width != 4) return 1;
+
+	spi_message_init(&m);
+	memset(t, 0, (sizeof t));
+
+	t[0].tx_buf = &command[0];
+	t[0].len = 1;
+	t[0].cs_change = 1;
+	spi_message_add_tail(&t[0], &m);
+
+	t[1].tx_buf = &command[1];
+	t[1].len = 1;
+	t[1].cs_change = 1;
+	spi_message_add_tail(&t[1], &m);
+
+	command[0] = OPCODE_RSTEN;
+	command[1] = OPCODE_RESET;
+
+	mutex_lock(&flash->lock);
+
+	ret = wait_till_ready(flash);
+	if (ret) {
+		mutex_unlock(&flash->lock);
+		return 1;
+	}
+
+	spi_sync(flash->spi, &m);
+
+	mutex_unlock(&flash->lock);
+
+	return 0;
+}
+
+/*
  * Erase the whole flash memory
  *
  * Returns 0 if successful, non-zero otherwise.
@@ -1135,6 +1182,9 @@
 	struct m25p	*flash = dev_get_drvdata(&spi->dev);
 	int		status;
 
+	/* Reset flash. */
+	flash_reset(flash);
+
 	/* Clean up MTD stuff. */
 	status = mtd_device_unregister(&flash->mtd);
 	if (status == 0) {
